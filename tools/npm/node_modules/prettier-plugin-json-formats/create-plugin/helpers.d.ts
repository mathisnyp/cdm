import type { ParserOptions } from 'prettier';
import type { Expression, ObjectExpression, ObjectProperty, ArrayExpression } from './parser';
import type { AstModifier } from './interfaces';
export declare function combine(...fns: AstModifier[]): AstModifier;
export declare function ifObjectExpression(fn: AstModifier<ObjectExpression, Expression>): AstModifier;
export declare function ifArrayExpression(fn: AstModifier<ArrayExpression, Expression>): AstModifier;
export declare const replaceProperties: (replacer: (props: ObjectProperty[], opts: ParserOptions, node: ObjectExpression) => ObjectProperty[]) => AstModifier<Expression, Expression>;
export declare const replacePropertyValues: (replacer: (prop: Expression, opts: ParserOptions, key: string, node: ObjectExpression) => Expression) => AstModifier<Expression, Expression>;
export declare const replacePropertyValue: (key: string, replacer: (prop: Expression, opts: ParserOptions, node: ObjectExpression) => Expression) => AstModifier<Expression, Expression>;
export declare function getProperty(node: ObjectExpression, key: string): ObjectProperty | undefined;
export declare const renameProperty: (oldKey: string, newKey: string) => AstModifier<Expression, Expression>;
export declare const sortObjectProperties: (order?: string[] | ((node: ObjectExpression, opts: ParserOptions) => string[] | undefined) | undefined) => AstModifier<Expression, Expression>;
export declare function deepSortObjectProperties(order?: string[] | ((node: ObjectExpression, opts: ParserOptions) => string[] | undefined)): AstModifier<Expression, Expression>;
export declare function getPropertyKeys(node: ObjectExpression): string[];
export declare const sortStringArray: AstModifier<Expression, Expression>;
