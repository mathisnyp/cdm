"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParser = exports.InvalidJsonError = exports.parseJson = void 0;
const flags_1 = require("../flags");
const parser_1 = require("./parser");
__exportStar(require("./nodes"), exports);
__exportStar(require("./values"), exports);
var parser_2 = require("./parser");
Object.defineProperty(exports, "parseJson", { enumerable: true, get: function () { return parser_2.parseJson; } });
Object.defineProperty(exports, "InvalidJsonError", { enumerable: true, get: function () { return parser_2.InvalidJsonError; } });
function locStart(node) {
    return node.start.offset;
}
function locEnd(node) {
    return node.end.offset;
}
function createParser(astFormat, modifier, flags = flags_1.JsonFlags.Loose) {
    return {
        astFormat,
        locStart,
        locEnd,
        parse: (text, options) => {
            const expression = modifier((0, parser_1.parseJson)(text, flags), options);
            return {
                type: 'program',
                expression,
                rawText: expression.rawText,
                end: expression.end,
                start: expression.start,
            };
        },
    };
}
exports.createParser = createParser;
