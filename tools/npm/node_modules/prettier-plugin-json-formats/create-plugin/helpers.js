"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortStringArray = exports.getPropertyKeys = exports.deepSortObjectProperties = exports.sortObjectProperties = exports.renameProperty = exports.getProperty = exports.replacePropertyValue = exports.replacePropertyValues = exports.replaceProperties = exports.ifArrayExpression = exports.ifObjectExpression = exports.combine = void 0;
function isStringLiteral(node) {
    return node.type === 'string';
}
function isArrayExpression(node) {
    return node.type === 'array';
}
function isObjectExpression(node) {
    return node.type === 'object';
}
function combine(...fns) {
    return (node, opts) => fns.reduce((node, fn) => fn(node, opts), node);
}
exports.combine = combine;
function ifObjectExpression(fn) {
    return (node, opts) => (isObjectExpression(node) ? fn(node, opts) : node);
}
exports.ifObjectExpression = ifObjectExpression;
function ifArrayExpression(fn) {
    return (node, opts) => (isArrayExpression(node) ? fn(node, opts) : node);
}
exports.ifArrayExpression = ifArrayExpression;
const replaceProperties = (replacer) => ifObjectExpression((node, opts) => ({
    ...node,
    properties: replacer(node.properties, opts, node),
}));
exports.replaceProperties = replaceProperties;
const replacePropertyValues = (replacer) => (0, exports.replaceProperties)((properties, opts, node) => properties.map(prop => ({
    ...prop,
    value: replacer(prop.value, opts, getKey(prop), node),
})));
exports.replacePropertyValues = replacePropertyValues;
const replacePropertyValue = (key, replacer) => (0, exports.replaceProperties)((properties, opts, node) => properties.map(prop => getKey(prop) === key
    ? { ...prop, value: replacer(prop.value, opts, node) }
    : prop));
exports.replacePropertyValue = replacePropertyValue;
function getProperty(node, key) {
    return node.properties.find(prop => getKey(prop) === key);
}
exports.getProperty = getProperty;
const renameProperty = (oldKey, newKey) => (0, exports.replaceProperties)(properties => properties.map(prop => {
    if (getKey(prop) !== oldKey) {
        return prop;
    }
    const key = prop.key;
    return {
        ...prop,
        key: isStringLiteral(prop.key)
            ? {
                ...key,
                value: newKey,
            }
            : {
                ...key,
                name: newKey,
            },
    };
}));
exports.renameProperty = renameProperty;
const sortObjectProperties = (order) => (0, exports.replaceProperties)((properties, opts, node) => {
    const actualOrder = (order && (typeof order === 'function' ? order(node, opts) : order)) ||
        properties.map(getKey).sort();
    return [
        ...properties
            .filter(prop => actualOrder.includes(getKey(prop)))
            .sort((a, b) => {
            return (actualOrder.indexOf(getKey(a)) - actualOrder.indexOf(getKey(b)));
        }),
        ...properties
            .filter(prop => !actualOrder.includes(getKey(prop)))
            .sort((a, b) => {
            const aKey = getKey(a);
            const bKey = getKey(b);
            if (aKey > bKey) {
                return 1;
            }
            else if (aKey < bKey) {
                return -1;
            }
            else {
                return 0;
            }
        }),
    ];
});
exports.sortObjectProperties = sortObjectProperties;
function deepSortObjectProperties(order) {
    const deepSort = combine((0, exports.sortObjectProperties)(order), (0, exports.replacePropertyValues)((node, opts) => isObjectExpression(node) ? deepSort(node, opts) : node));
    return deepSort;
}
exports.deepSortObjectProperties = deepSortObjectProperties;
function getKey(prop) {
    return prop.key.value;
}
function getPropertyKeys(node) {
    return node.properties.map(getKey);
}
exports.getPropertyKeys = getPropertyKeys;
exports.sortStringArray = ifArrayExpression(node => {
    if (node.elements.some(node => !isStringLiteral(node))) {
        return node;
    }
    return {
        ...node,
        elements: [...node.elements].sort((a, b) => a.value.localeCompare(b.value)),
    };
});
