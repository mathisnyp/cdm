"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageJsonPlugin = void 0;
const create_plugin_1 = require("./create-plugin");
const lifecycleScripts = [
    'install',
    'pack',
    'prepare',
    'publish',
    'restart',
    'shrinkwrap',
    'start',
    'stop',
    'test',
    'uninstall',
    'version',
];
function parseScriptName(name) {
    if (name.startsWith('pre') && name !== 'prepare') {
        return { name: name.slice(3), offset: -0.4 };
    }
    else if (name.startsWith('post')) {
        return { name: name.slice(4), offset: 0.4 };
    }
    else {
        return { name, offset: 0 };
    }
}
const sortScripts = (0, create_plugin_1.sortObjectProperties)(node => (0, create_plugin_1.getPropertyKeys)(node).sort((_a, _b) => {
    const a = parseScriptName(_a);
    const b = parseScriptName(_b);
    if (lifecycleScripts.includes(a.name)) {
        if (lifecycleScripts.includes(b.name)) {
            return (lifecycleScripts.indexOf(a.name) +
                1 +
                a.offset -
                (lifecycleScripts.indexOf(b.name) + 1 + b.offset));
        }
        else {
            return -1;
        }
    }
    else {
        if (lifecycleScripts.includes(b.name)) {
            return 1;
        }
        else {
            return a.name.localeCompare(b.name) || a.offset - b.offset;
        }
    }
}));
const modifier = (0, create_plugin_1.combine)(
// Sort the top-level object in a given order
(0, create_plugin_1.sortObjectProperties)([
    'name',
    'version',
    'private',
    'description',
    'keywords',
    'homepage',
    'bugs',
    'repository',
    'license',
    'author',
    'contributors',
    'bin',
    'man',
    'directovires',
    'files',
    'sideEffects',
    'workspaces',
    'scripts',
    'main',
    'exports',
    'imports',
    'umd:main',
    'jsdelivr',
    'unpkg',
    'module',
    'source',
    'jsnext:main',
    'browser',
    'types',
    'typings',
    'style',
    'dependencies',
    'bundledDependencies',
    'bundleDependencies',
    'optionalDependencies',
    'peerDependencies',
    'peerDependenciesMeta',
    'devDependencies',
    'dependenciesMeta',
    'engines',
    'publishConfig',
]), 
// Now sort the values of the top-level properties
(0, create_plugin_1.replacePropertyValues)((value, opts, key) => {
    switch (key) {
        case 'exports':
        case 'imports':
            // Keep exports and imports as they are. Order can be important here,
            // depending on the shape of the declared exports/imports.
            return value;
        case 'scripts':
            // Sort scripts using a script-specific sort order
            return sortScripts(value, opts);
        case 'bundleDependencies':
        case 'bundledDependencies':
            return (0, create_plugin_1.sortStringArray)(value, opts);
        case 'publishConfig':
            return modifier(value, opts);
        default:
            return (0, create_plugin_1.deepSortObjectProperties)()(value, opts);
    }
}));
exports.packageJsonPlugin = (0, create_plugin_1.createJsonPlugin)({
    language: { name: 'package-json' },
    modifier,
});
