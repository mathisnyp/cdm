{"version":3,"sources":["../src/utils.ts"],"names":["dedupe","arr","Set","trimSpacesEnd","str","replace","last","length","isEmpty","Array","isArray","escapeRegExp","string","sortByLengthDesc","strings","sort","a","b","localeCompare","maxLength","reduce","max","cur","Math","tabulateLines","columns","lines","existingMaxLength","map","line","i","repeat"],"mappings":";;;;;;;;;;;;;;;;;;;AAAO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;AAAA,4BAAuB,IAAIC,GAAJ,CAAQD,GAAR,CAAvB;AAAA,CAAf,C,CAEP;;;;;AACO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD;AAAA,SAAiBA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAwB,EAAxB,CAAjB;AAAA,CAAtB,C,CAEP;;;;;AACO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAgBL,GAAhB;AAAA,SAA6BA,GAAG,CAACA,GAAG,CAACM,MAAJ,GAAa,CAAd,CAAhC;AAAA,CAAb,C,CAEP;;;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACP,GAAD;AAAA,SAAgB,CAACQ,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAD,IAAuBA,GAAG,CAACM,MAAJ,KAAe,CAAtD;AAAA,CAAhB,C,CAEP;;;;;AACO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAoBA,MAAM,CAACP,OAAP,CAAe,0BAAf,EAAuC,MAAvC,CAApB;AAAA,CAArB,C,CAEP;AACA;;;;;AACO,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD;AAAA,SAC/BA,OAAO,CAACC,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACtB,WAAOA,CAAC,CAACV,MAAF,GAAWS,CAAC,CAACT,MAAb,IAAuBS,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAA9B;AACA,GAFD,CAD+B;AAAA,CAAzB;AAKP;;;;;AACO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACL,OAAD;AAAA,SACxBA,OAAO,CAACM,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcC,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcC,GAAG,CAACf,MAAlB,CAAd;AAAA,GAAf,EAAwD,CAAxD,CADwB;AAAA,CAAlB;AAGP;;;;;AACO,IAAMiB,aAAa,GAAG,SAAhBA,aAAgB;AAAA,oCAAIC,OAAJ;AAAIA,IAAAA,OAAJ;AAAA;;AAAA,SAC5BA,OAAO,CAACL,MAAR,CAAe,UAACM,KAAD,EAAQJ,GAAR,EAAgB;AAC9B,QAAMK,iBAAiB,GAAGR,SAAS,CAACO,KAAD,CAAnC;AACA,WAAOA,KAAK,CAACE,GAAN,CACN,UAACC,IAAD,EAAOC,CAAP;AAAA,aAAaD,IAAI,GAAG,IAAIE,MAAJ,CAAWR,IAAI,CAACF,GAAL,CAASM,iBAAiB,GAAGE,IAAI,CAACtB,MAAlC,EAA0C,CAA1C,IAA+C,CAA1D,CAAP,GAAsEe,GAAG,CAACQ,CAAD,CAAtF;AAAA,KADM,CAAP;AAGA,GALD,CAD4B;AAAA,CAAtB","sourcesContent":["export const dedupe = (arr: string[]) => [...new Set(arr)];\n\n// Only removes spaces, not newlines\nexport const trimSpacesEnd = (str: string) => str.replace(/[ \\t]+$/u, '');\n\n// Last element from array\nexport const last = <T extends any>(arr: T[]) => arr[arr.length - 1];\n\n// True array is empty, or it's not an array at all\nexport const isEmpty = (arr: any[]) => !Array.isArray(arr) || arr.length === 0;\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings: string[]) =>\n\tstrings.sort((a, b) => {\n\t\treturn b.length - a.length || a.localeCompare(b);\n\t});\n\n/** Get length of longest string in list of strings */\nexport const maxLength = (strings: string[]) =>\n\tstrings.reduce((max, cur) => Math.max(max, cur.length), 0);\n\n/** Make all strings in list the same length by appending spaces */\nexport const tabulateLines = (...columns: string[][]) =>\n\tcolumns.reduce((lines, cur) => {\n\t\tconst existingMaxLength = maxLength(lines);\n\t\treturn lines.map(\n\t\t\t(line, i) => line + ' '.repeat(Math.max(existingMaxLength - line.length, 0) + 1) + cur[i]\n\t\t);\n\t});\n"],"file":"utils.js"}