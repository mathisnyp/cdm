"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommaPosition = exports.AliasMode = exports.NewlineMode = exports.KeywordMode = void 0;

/**
 * Enum for the different keyword formats
 * @enum {string}
 * @property {string} standard - Standard keyword format
 * @property {string} tenSpaceLeft - Central aligned keyword format, keywords left-aligned
 * @property {string} tenSpaceRight - Central aligned keyword format, keywords right-aligned
 */
var KeywordMode;
/**
 * Enum for the different newline modes
 * @enum {string}
 * @property {string} always - Always use newlines
 * @property {string} never - Never use newlines
 * @property {string} lineWidth - Use newlines when line width is greater than the specified number
 */

exports.KeywordMode = KeywordMode;

(function (KeywordMode) {
  KeywordMode["standard"] = "standard";
  KeywordMode["tenSpaceLeft"] = "tenSpaceLeft";
  KeywordMode["tenSpaceRight"] = "tenSpaceRight";
})(KeywordMode || (exports.KeywordMode = KeywordMode = {}));

var NewlineMode;
/**
 * Enum for when to place AS for column aliases
 * @enum {string}
 * @property {string} always - Always use AS
 * @property {string} never - Never use AS
 * @property {string} select - Only use AS for SELECT clauses
 */

exports.NewlineMode = NewlineMode;

(function (NewlineMode) {
  NewlineMode["always"] = "always";
  NewlineMode["never"] = "never";
  NewlineMode["lineWidth"] = "lineWidth";
})(NewlineMode || (exports.NewlineMode = NewlineMode = {}));

var AliasMode;
/**
 * Enum for when to place commas in listed clauses
 * @enum {string}
 * @property {string} after - Place after each item
 * @property {string} before - Place before each item
 * @property {string} tabular - Place commas at end of line, right-justified
 */

exports.AliasMode = AliasMode;

(function (AliasMode) {
  AliasMode["always"] = "always";
  AliasMode["never"] = "never";
  AliasMode["select"] = "select";
})(AliasMode || (exports.AliasMode = AliasMode = {}));

var CommaPosition;
exports.CommaPosition = CommaPosition;

(function (CommaPosition) {
  CommaPosition["before"] = "before";
  CommaPosition["after"] = "after";
  CommaPosition["tabular"] = "tabular";
})(CommaPosition || (exports.CommaPosition = CommaPosition = {}));
//# sourceMappingURL=types.js.map