{"version":3,"sources":["../../src/core/Indentation.ts"],"names":["INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","indentTypes","repeat","length","push","pop","type"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAG,WAA9B;AACA,IAAMC,uBAAuB,GAAG,aAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,W;AAIpB;AACD;AACA;AACC,yBAAmC;AAAA,QAAvBC,MAAuB,uEAAN,IAAM;;AAAA;;AAAA;;AAAA;;AAClC,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA;AAED;AACD;AACA;AACA;;;;;WACC,qBAAoB;AACnB,aAAO,KAAKD,MAAL,CAAYE,MAAZ,CAAmB,KAAKD,WAAL,CAAiBE,MAApC,CAAP;AACA;AAED;AACD;AACA;;;;WACC,4BAAmB;AAClB,WAAKF,WAAL,CAAiBG,IAAjB,CAAsBP,qBAAtB;AACA;AAED;AACD;AACA;;;;WACC,8BAAqB;AACpB,WAAKI,WAAL,CAAiBG,IAAjB,CAAsBN,uBAAtB;AACA;AAED;AACD;AACA;AACA;;;;WACC,4BAAmB;AAClB,UAAI,KAAKG,WAAL,CAAiBE,MAAjB,GAA0B,CAA1B,IAA+B,iBAAK,KAAKF,WAAV,MAA2BJ,qBAA9D,EAAqF;AACpF,aAAKI,WAAL,CAAiBI,GAAjB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;;;;WACC,8BAAqB;AACpB,aAAO,KAAKJ,WAAL,CAAiBE,MAAjB,GAA0B,CAAjC,EAAoC;AACnC,YAAMG,IAAI,GAAG,KAAKL,WAAL,CAAiBI,GAAjB,EAAb;;AACA,YAAIC,IAAI,KAAKT,qBAAb,EAAoC;AACnC;AACA;AACD;AACD;AAED;;;;WACA,4BAAmB;AAClB,WAAKI,WAAL,GAAmB,EAAnB;AACA","sourcesContent":["import { last } from '../utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_COMMAND words\n */\nexport default class Indentation {\n\tindent: string;\n\tindentTypes: string[];\n\n\t/**\n\t * @param {string} indent Indent value, default is \"  \" (2 spaces)\n\t */\n\tconstructor(indent: string = '  ') {\n\t\tthis.indent = indent;\n\t\tthis.indentTypes = [];\n\t}\n\n\t/**\n\t * Returns current indentation string.\n\t * @return {string} indentation string based on indentTypes\n\t */\n\tgetIndent(): string {\n\t\treturn this.indent.repeat(this.indentTypes.length);\n\t}\n\n\t/**\n\t * Increases indentation by one top-level indent.\n\t */\n\tincreaseTopLevel() {\n\t\tthis.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n\t}\n\n\t/**\n\t * Increases indentation by one block-level indent.\n\t */\n\tincreaseBlockLevel() {\n\t\tthis.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n\t}\n\n\t/**\n\t * Decreases indentation by one top-level indent.\n\t * Does nothing when the previous indent is not top-level.\n\t */\n\tdecreaseTopLevel() {\n\t\tif (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n\t\t\tthis.indentTypes.pop();\n\t\t}\n\t}\n\n\t/**\n\t * Decreases indentation by one block-level indent.\n\t * If there are top-level indents within the block-level indent,\n\t * throws away these as well.\n\t */\n\tdecreaseBlockLevel() {\n\t\twhile (this.indentTypes.length > 0) {\n\t\t\tconst type = this.indentTypes.pop();\n\t\t\tif (type !== INDENT_TYPE_TOP_LEVEL) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Clears all indentation */\n\tresetIndentation() {\n\t\tthis.indentTypes = [];\n\t}\n}\n"],"file":"Indentation.js"}