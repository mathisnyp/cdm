{"version":3,"sources":["../../src/core/InlineBlock.ts"],"names":["InlineBlock","lineWidth","level","tokens","index","isInlineBlock","length","i","token","value","isForbiddenToken","type","TokenType","BLOCK_START","isToken","CASE","BLOCK_END","RESERVED_COMMAND","RESERVED_LOGICAL_OPERATOR","BLOCK_COMMENT"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,W;AAIpB,uBAAYC,SAAZ,EAA+B;AAAA;;AAAA;;AAAA;;AAC9B,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;;WACC,yBAAgBE,MAAhB,EAAiCC,KAAjC,EAAgD;AAC/C,UAAI,KAAKF,KAAL,KAAe,CAAf,IAAoB,KAAKG,aAAL,CAAmBF,MAAnB,EAA2BC,KAA3B,CAAxB,EAA2D;AAC1D,aAAKF,KAAL,GAAa,CAAb;AACA,OAFD,MAEO,IAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;AAC1B,aAAKA,KAAL;AACA,OAFM,MAEA;AACN,aAAKA,KAAL,GAAa,CAAb;AACA;AACD;AAED;AACD;AACA;AACA;;;;WACC,eAAM;AACL,WAAKA,KAAL;AACA;AAED;AACD;AACA;;;;WACC,oBAAoB;AACnB,aAAO,KAAKA,KAAL,GAAa,CAApB;AACA;AAED;AACD;AACA;AACA;;;;WACC,uBAAcC,MAAd,EAA+BC,KAA/B,EAAuD;AACtD,UAAIE,MAAM,GAAG,CAAb;AACA,UAAIJ,KAAK,GAAG,CAAZ;;AAEA,WAAK,IAAIK,CAAC,GAAGH,KAAb,EAAoBG,CAAC,GAAGJ,MAAM,CAACG,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC3C,YAAMC,KAAK,GAAGL,MAAM,CAACI,CAAD,CAApB;AACAD,QAAAA,MAAM,IAAIE,KAAK,CAACC,KAAN,CAAYH,MAAtB;;AAEA,YAAI,KAAKI,gBAAL,CAAsBF,KAAtB,CAAJ,EAAkC;AACjC,iBAAO,KAAP;AACA,SAN0C,CAQ3C;;;AACA,YAAIF,MAAM,GAAG,KAAKL,SAAlB,EAA6B;AAC5B,iBAAO,KAAP;AACA,SAX0C,CAa3C;;;AACA,YAAIO,KAAK,CAACG,IAAN,KAAeC,iBAAUC,WAAzB,IAAwC,CAACC,eAAQC,IAAR,CAAaP,KAAb,CAA7C,EAAkE;AACjEN,UAAAA,KAAK;AACL,SAFD,MAEO,IAAIM,KAAK,CAACG,IAAN,KAAeC,iBAAUI,SAA7B,EAAwC;AAC9Cd,UAAAA,KAAK;;AACL,cAAIA,KAAK,KAAK,CAAd,EAAiB;AAChB,mBAAO,IAAP;AACA;AACD;AACD;;AACD,aAAO,KAAP;AACA,K,CAED;AACA;;;;WACA,gCAAyC;AAAA,UAAtBS,IAAsB,QAAtBA,IAAsB;AAAA,UAAhBF,KAAgB,QAAhBA,KAAgB;AACxC,aACCE,IAAI,KAAKC,iBAAUK,gBAAnB,IACAN,IAAI,KAAKC,iBAAUM,yBADnB,IAEA;AACAP,MAAAA,IAAI,KAAKC,iBAAUO,aAHnB,IAIAV,KAAK,KAAK,GAJV,IAKAK,eAAQC,IAAR,CAAa;AAAEJ,QAAAA,IAAI,EAAJA,IAAF;AAAQF,QAAAA,KAAK,EAALA;AAAR,OAAb,CAND,CAM+B;AAN/B;AAQA","sourcesContent":["import { isToken, Token, TokenType } from './token';\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthesised\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n\tlevel: number;\n\tlineWidth: number;\n\n\tconstructor(lineWidth: number) {\n\t\tthis.level = 0;\n\t\tthis.lineWidth = lineWidth;\n\t}\n\n\t/**\n\t * Begins inline block when lookahead through upcoming tokens determines\n\t * that the block would be smaller than INLINE_MAX_LENGTH.\n\t * @param  {Token[]} tokens Array of all tokens\n\t * @param  {Number} index Current token position\n\t */\n\tbeginIfPossible(tokens: Token[], index: number) {\n\t\tif (this.level === 0 && this.isInlineBlock(tokens, index)) {\n\t\t\tthis.level = 1;\n\t\t} else if (this.level > 0) {\n\t\t\tthis.level++;\n\t\t} else {\n\t\t\tthis.level = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Finishes current inline block.\n\t * There might be several nested ones.\n\t */\n\tend() {\n\t\tthis.level--;\n\t}\n\n\t/**\n\t * True when inside an inline block\n\t */\n\tisActive(): boolean {\n\t\treturn this.level > 0;\n\t}\n\n\t/**\n\t * Check if this should be an inline parentheses block\n\t * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n\t */\n\tisInlineBlock(tokens: Token[], index: number): boolean {\n\t\tlet length = 0;\n\t\tlet level = 0;\n\n\t\tfor (let i = index; i < tokens.length; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tlength += token.value.length;\n\n\t\t\tif (this.isForbiddenToken(token)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Overran max length\n\t\t\tif (length > this.lineWidth) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// CASE cannot start inline block\n\t\t\tif (token.type === TokenType.BLOCK_START && !isToken.CASE(token)) {\n\t\t\t\tlevel++;\n\t\t\t} else if (token.type === TokenType.BLOCK_END) {\n\t\t\t\tlevel--;\n\t\t\t\tif (level === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Reserved words that cause newlines, comments and semicolons\n\t// are not allowed inside inline parentheses block\n\tisForbiddenToken({ type, value }: Token) {\n\t\treturn (\n\t\t\ttype === TokenType.RESERVED_COMMAND ||\n\t\t\ttype === TokenType.RESERVED_LOGICAL_OPERATOR ||\n\t\t\t// type === TokenType.LINE_COMMENT ||\n\t\t\ttype === TokenType.BLOCK_COMMENT ||\n\t\t\tvalue === ';' ||\n\t\t\tisToken.CASE({ type, value }) // CASE cannot have inline blocks\n\t\t);\n\t}\n}\n"],"file":"InlineBlock.js"}