{"version":3,"sources":["../../src/core/Formatter.ts"],"names":["Formatter","cfg","tenSpace","keywordPosition","KeywordMode","tenSpaceLeft","tenSpaceRight","newline","currentNewline","lineWidth","indentation","Indentation","indent","inlineBlock","InlineBlock","params","Params","previousReservedToken","withinSelect","tokens","index","Error","token","query","tokenizer","tokenize","formattedQuery","getFormattedQueryFromTokens","finalQuery","postFormat","replace","trimEnd","tabulateAlias","formatAliasPositions","commaPosition","CommaPosition","after","formatCommaPositions","lines","split","newQuery","i","length","match","commaLines","push","tabular","map","commaLine","commaMaxLength","j","repeat","before","isTabs","includes","whitespaceRegex","WHITESPACE_REGEX","precedingWhitespace","RegExp","trimLastIndent","trimStart","join","aliasLines","splitLines","line","slugs","precedingText","alias","undefined","as","aliasMaxLength","tokenOverride","type","TokenType","RESERVED_KEYWORD","tenSpacedToken","RESERVED_COMMAND","isToken","SELECT","LINE_COMMENT","formatLineComment","BLOCK_COMMENT","formatBlockComment","checkNewline","formatCommand","RESERVED_BINARY_COMMAND","formatBinaryCommand","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","RESERVED_LOGICAL_OPERATOR","formatLogicalOperator","formatKeyword","BLOCK_START","formatBlockStart","BLOCK_END","formatBlockEnd","PLACEHOLDER","formatPlaceholder","OPERATOR","formatOperator","formatWord","ZWS","prevToken","tokenLookBehind","nextToken","tokenLookAhead","asToken","value","uppercase","missingTableAlias","aliasAs","AliasMode","always","WORD","missingSelectColumnAlias","never","END","NUMBER","missingCastTypeAs","CAST","AS","isEdgeCaseCTE","WITH","isEdgeCaseCreateTable","TABLE","endsWith","formatWithSpaces","tail","slice","nextTokens","findIndex","NewlineMode","some","numItems","reduce","acc","inParen","count","inlineWidth","whitespaceBefore","Number","isNaN","addNewline","show","indentComment","comment","getIndent","decreaseTopLevel","increaseTopLevel","FROM","equalizeWhitespace","isJoin","test","select","formatComma","formatQuerySeparator","formatWithoutSpaces","denseOperators","AND","BETWEEN","breakBeforeBooleanOperator","string","CASE","preserveWhitespaceFor","parenOptions","openParenNewline","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","closeParenNewline","get","LIMIT","addSpace","resetIndentation","semicolonNewline","linesBetweenQueries","toUpperCase","toLowerCase","addBuffer","bufferLength","Math","max","bufferItem","n"],"mappings":"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","sourcesContent":["import Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\nimport { maxLength, trimSpacesEnd } from '../utils';\nimport { isReserved, isCommand, isToken, Token, TokenType, ZWS } from './token';\nimport Tokenizer from './Tokenizer';\nimport type { FormatOptions } from '../sqlFormatter';\nimport { AliasMode, CommaPosition, KeywordMode, NewlineMode } from '../types';\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n\tcfg: FormatOptions & { tenSpace?: boolean };\n\tnewline: FormatOptions['newline'];\n\tcurrentNewline: boolean;\n\tlineWidth: number;\n\tindentation: Indentation;\n\tinlineBlock: InlineBlock;\n\tparams: Params;\n\n\tpreviousReservedToken: Token;\n\twithinSelect: boolean;\n\ttokens: Token[];\n\tindex: number;\n\n\t/**\n\t *\t@param {FormatOptions} cfg - config object\n\t *\t@param {string} cfg.language - the current SQL dialect\n\t *\t@param {string} cfg.indent - the indentation string, either tabs or a number of spaces\n\t *\t@param {Boolean} cfg.uppercase - whether to use uppercase keywords\n\t *\t@param {NewlineMode} cfg.newline - setting to control when to break onto newlines\n\t *\t@param {Integer} cfg.lineWidth - the maximum line width before breaking\n\t *\t@param {Integer} cfg.linesBetweenQueries - the number of blank lines between each query\n\t *\t@param {ParamItems | string[]} cfg.params - placeholder tokens to substitute\n\t */\n\tconstructor(cfg: FormatOptions) {\n\t\tthis.cfg = cfg;\n\t\tthis.cfg.tenSpace =\n\t\t\tthis.cfg.keywordPosition === KeywordMode.tenSpaceLeft ||\n\t\t\tthis.cfg.keywordPosition === KeywordMode.tenSpaceRight;\n\t\tthis.newline = cfg.newline;\n\t\tthis.currentNewline = true;\n\t\tthis.lineWidth = cfg.lineWidth;\n\t\tthis.indentation = new Indentation(this.cfg.indent);\n\t\tthis.inlineBlock = new InlineBlock(this.lineWidth);\n\t\tthis.params = new Params(this.cfg.params);\n\n\t\tthis.previousReservedToken = {} as Token;\n\t\tthis.withinSelect = false;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t}\n\n\t/**\n\t * SQL Tokenizer for this formatter, provided by subclasses.\n\t */\n\ttokenizer(): Tokenizer {\n\t\tthrow new Error('tokenizer() not implemented by subclass');\n\t}\n\n\t/**\n\t * Reprocess and modify a token based on parsed context.\n\t *\n\t * @param {Token} token - The token to modify\n\t * @return {Token} new token or the original\n\t */\n\ttokenOverride(token: Token): Token {\n\t\t// subclasses can override this to modify tokens during formatting\n\t\treturn token;\n\t}\n\n\t/**\n\t * Formats whitespace in a SQL string to make it easier to read.\n\t *\n\t * @param {string} query - The SQL query string\n\t */\n\tformat(query: string): string {\n\t\tthis.tokens = this.tokenizer().tokenize(query);\n\t\tconst formattedQuery = this.getFormattedQueryFromTokens();\n\t\tconst finalQuery = this.postFormat(formattedQuery);\n\n\t\treturn finalQuery.replace(/^\\n*/u, '').trimEnd();\n\t}\n\n\t/**\n\t * Does post-processing on the formatted query.\n\t * @param {string} query - the query string produced from `this.format`\n\t */\n\tpostFormat(query: string): string {\n\t\tif (this.cfg.tabulateAlias) {\n\t\t\tquery = this.formatAliasPositions(query);\n\t\t}\n\t\tif (this.cfg.commaPosition !== CommaPosition.after) {\n\t\t\tquery = this.formatCommaPositions(query);\n\t\t}\n\n\t\treturn query;\n\t}\n\n\t/**\n\t * Handles comma placement - either before, after or tabulated\n\t * @param {string} query - input query string\n\t */\n\tformatCommaPositions(query: string): string {\n\t\t// const trailingComma = /,$/;\n\t\tconst lines = query.split('\\n');\n\t\tlet newQuery: string[] = [];\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t// if line has trailing comma\n\t\t\tif (lines[i].match(/.*,$/)) {\n\t\t\t\tlet commaLines = [lines[i]];\n\t\t\t\t// find all lines in comma-bound clause, + 1\n\t\t\t\twhile (lines[i++].match(/.*,$/)) {\n\t\t\t\t\tcommaLines.push(lines[i]);\n\t\t\t\t}\n\n\t\t\t\tif (this.cfg.commaPosition === CommaPosition.tabular) {\n\t\t\t\t\tcommaLines = commaLines.map(commaLine => commaLine.replace(/,$/, '')); // trim all trailing commas\n\t\t\t\t\tconst commaMaxLength = maxLength(commaLines); // get longest for alignment\n\t\t\t\t\t// make all lines the same length by appending spaces before comma\n\t\t\t\t\tcommaLines = commaLines.map((commaLine, j) =>\n\t\t\t\t\t\tj < commaLines.length - 1 // do not add comma for last item\n\t\t\t\t\t\t\t? commaLine + ' '.repeat(commaMaxLength - commaLine.length) + ','\n\t\t\t\t\t\t\t: commaLine\n\t\t\t\t\t);\n\t\t\t\t} else if (this.cfg.commaPosition === CommaPosition.before) {\n\t\t\t\t\tconst isTabs = this.cfg.indent.includes('\\t'); // loose tab check\n\t\t\t\t\tcommaLines = commaLines.map(commaLine => commaLine.replace(/,$/, ''));\n\t\t\t\t\tconst whitespaceRegex = this.tokenizer().WHITESPACE_REGEX;\n\n\t\t\t\t\tcommaLines = commaLines.map((commaLine, j) => {\n\t\t\t\t\t\tif (!j) {\n\t\t\t\t\t\t\t// do not add comma for first item\n\t\t\t\t\t\t\treturn commaLine;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst precedingWhitespace = commaLine.match(new RegExp('^' + whitespaceRegex + ''));\n\t\t\t\t\t\tconst trimLastIndent = precedingWhitespace\n\t\t\t\t\t\t\t? precedingWhitespace[1].replace(\n\t\t\t\t\t\t\t\t\tnew RegExp((isTabs ? '\\t' : this.cfg.indent) + '$'), // remove last tab / last indent\n\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: '';\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\ttrimLastIndent +\n\t\t\t\t\t\t\t// add comma in place of last indent\n\t\t\t\t\t\t\t(isTabs ? '    ' : this.cfg.indent).replace(/ {2}$/, ', ') + // using 4 width tabs\n\t\t\t\t\t\t\tcommaLine.trimStart()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tnewQuery = [...newQuery, ...commaLines];\n\t\t\t}\n\t\t\tnewQuery.push(lines[i]);\n\t\t}\n\n\t\treturn newQuery.join('\\n');\n\t}\n\n\t/**\n\t * Handles select alias placement - tabulates if enabled\n\t * @param {string} query - input query string\n\t */\n\tformatAliasPositions(query: string): string {\n\t\tconst lines = query.split('\\n');\n\n\t\tlet newQuery: string[] = [];\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t// find SELECT rows with trailing comma, if no comma (only one row) - no-op\n\t\t\tif (lines[i].match(/^\\s*SELECT/i)) {\n\t\t\t\tlet aliasLines: string[] = [];\n\t\t\t\tif (lines[i].match(/.*,$/)) {\n\t\t\t\t\taliasLines = [lines[i]]; // add select to aliasLines in case of tenSpace formats\n\t\t\t\t} else {\n\t\t\t\t\tnewQuery.push(lines[i]); // add select to new query\n\t\t\t\t\tif (lines[i].match(/^\\s*SELECT\\s+.+(?!,$)/i)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\taliasLines.push(lines[++i]);\n\t\t\t\t}\n\n\t\t\t\t// get all lines in SELECT clause\n\t\t\t\twhile (lines[i++].match(/.*,$/)) {\n\t\t\t\t\taliasLines.push(lines[i]);\n\t\t\t\t}\n\n\t\t\t\tconst splitLines = aliasLines\n\t\t\t\t\t.map(line => line.split(/(?<=[^\\s]+) (AS )?(?=[^\\s]+,?$)/i)) // break lines into alias with optional AS, and all preceding text\n\t\t\t\t\t.map(slugs => ({\n\t\t\t\t\t\tprecedingText: slugs[0], // always first split\n\t\t\t\t\t\talias: slugs.length > 1 ? slugs[slugs.length - 1] : undefined, // always last in split\n\t\t\t\t\t\tas: slugs.length === 3 ? slugs[1] : undefined, // 2nd if AS is present, else omitted\n\t\t\t\t\t}));\n\n\t\t\t\tconst aliasMaxLength = maxLength(\n\t\t\t\t\tsplitLines.map(({ precedingText }) => precedingText.replace(/\\s*,\\s*$/, '')) // get longest of precedingText, trim trailing comma for non-alias columns\n\t\t\t\t);\n\t\t\t\t// re-construct line, aligning by inserting space before AS or alias\n\t\t\t\taliasLines = splitLines.map(\n\t\t\t\t\t({ precedingText, as, alias }) =>\n\t\t\t\t\t\tprecedingText +\n\t\t\t\t\t\t(alias\n\t\t\t\t\t\t\t? ' '.repeat(aliasMaxLength - precedingText.length + 1) + (as ?? '') + alias\n\t\t\t\t\t\t\t: '')\n\t\t\t\t);\n\t\t\t\tnewQuery = [...newQuery, ...aliasLines];\n\t\t\t}\n\t\t\tnewQuery.push(lines[i]);\n\t\t}\n\n\t\treturn newQuery.join('\\n');\n\t}\n\n\t/**\n\t * Performs main construction of query from token list, delegates to other methods for formatting based on token criteria\n\t * @return {string} formatted query\n\t */\n\tgetFormattedQueryFromTokens(): string {\n\t\tlet formattedQuery = '';\n\n\t\tfor (this.index = 0; this.index < this.tokens.length; this.index++) {\n\t\t\tlet token = this.tokenOverride(this.tokens[this.index]);\n\n\t\t\t// if token is a Reserved Keyword, Command, Binary Command, Dependent Clause, Logical Operator\n\t\t\tif (isReserved(token)) {\n\t\t\t\tthis.previousReservedToken = token;\n\t\t\t\tif (token.type !== TokenType.RESERVED_KEYWORD) {\n\t\t\t\t\ttoken = this.tenSpacedToken(token); // convert Reserved Command or Logical Operator to tenSpace format if needed\n\t\t\t\t}\n\t\t\t\tif (token.type === TokenType.RESERVED_COMMAND) {\n\t\t\t\t\tthis.withinSelect = isToken.SELECT(token); // set withinSelect flag if entering a SELECT clause, else reset\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (token.type === TokenType.LINE_COMMENT) {\n\t\t\t\tformattedQuery = this.formatLineComment(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.BLOCK_COMMENT) {\n\t\t\t\tformattedQuery = this.formatBlockComment(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.RESERVED_COMMAND) {\n\t\t\t\tthis.currentNewline = this.checkNewline(this.index);\n\t\t\t\tformattedQuery = this.formatCommand(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.RESERVED_BINARY_COMMAND) {\n\t\t\t\tformattedQuery = this.formatBinaryCommand(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.RESERVED_DEPENDENT_CLAUSE) {\n\t\t\t\tformattedQuery = this.formatDependentClause(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.RESERVED_LOGICAL_OPERATOR) {\n\t\t\t\tformattedQuery = this.formatLogicalOperator(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.RESERVED_KEYWORD) {\n\t\t\t\tformattedQuery = this.formatKeyword(token, formattedQuery);\n\t\t\t\tthis.previousReservedToken = token;\n\t\t\t} else if (token.type === TokenType.BLOCK_START) {\n\t\t\t\tformattedQuery = this.formatBlockStart(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.BLOCK_END) {\n\t\t\t\tformattedQuery = this.formatBlockEnd(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.PLACEHOLDER) {\n\t\t\t\tformattedQuery = this.formatPlaceholder(token, formattedQuery);\n\t\t\t} else if (token.type === TokenType.OPERATOR) {\n\t\t\t\tformattedQuery = this.formatOperator(token, formattedQuery);\n\t\t\t} else {\n\t\t\t\tformattedQuery = this.formatWord(token, formattedQuery);\n\t\t\t}\n\t\t}\n\t\treturn formattedQuery.replace(new RegExp(ZWS, 'ugim'), ' '); // replace all ZWS with whitespace for TenSpace formats\n\t}\n\n\t/**\n\t * Formats word tokens + any potential AS tokens for aliases\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatWord(token: Token, query: string): string {\n\t\tconst prevToken = this.tokenLookBehind();\n\t\tconst nextToken = this.tokenLookAhead();\n\t\tconst asToken = { type: TokenType.RESERVED_KEYWORD, value: this.cfg.uppercase ? 'AS' : 'as' };\n\n\t\tconst missingTableAlias = // if table alias is missing and alias is always\n\t\t\tthis.cfg.aliasAs === AliasMode.always &&\n\t\t\ttoken.type === TokenType.WORD &&\n\t\t\tprevToken?.value === ')';\n\n\t\tconst missingSelectColumnAlias = // if select column alias is missing and alias is not never\n\t\t\tthis.cfg.aliasAs !== AliasMode.never &&\n\t\t\tthis.withinSelect &&\n\t\t\ttoken.type === TokenType.WORD &&\n\t\t\t(isToken.END(prevToken) || // isAs(prevToken) ||\n\t\t\t\t((prevToken?.type === TokenType.WORD || prevToken?.type === TokenType.NUMBER) &&\n\t\t\t\t\t(nextToken?.value === ',' || isCommand(nextToken))));\n\n\t\t// bandaid fix until Nearley tree\n\t\tconst missingCastTypeAs =\n\t\t\tthis.cfg.aliasAs === AliasMode.never && // checks for CAST(«expression» [AS] type)\n\t\t\tthis.withinSelect &&\n\t\t\tisToken.CAST(this.previousReservedToken) &&\n\t\t\tisToken.AS(nextToken) &&\n\t\t\t(this.tokenLookAhead(2)?.type === TokenType.WORD ||\n\t\t\t\tthis.tokenLookAhead(2)?.type === TokenType.RESERVED_KEYWORD) &&\n\t\t\tthis.tokenLookAhead(3)?.value === ')';\n\n\t\tconst isEdgeCaseCTE = // checks for WITH `table` [AS] (\n\t\t\tthis.cfg.aliasAs === AliasMode.never &&\n\t\t\tisToken.WITH(prevToken) &&\n\t\t\t(nextToken?.value === '(' ||\n\t\t\t\t(isToken.AS(nextToken) && this.tokenLookAhead(2)?.value === '('));\n\n\t\tconst isEdgeCaseCreateTable = // checks for CREATE TABLE `table` [AS] WITH (\n\t\t\tthis.cfg.aliasAs === AliasMode.never &&\n\t\t\t(isToken.TABLE(prevToken) || prevToken?.value.endsWith('TABLE')) &&\n\t\t\t(isToken.WITH(nextToken) || (isToken.AS(nextToken) && isToken.WITH(this.tokenLookAhead(2))));\n\n\t\tlet finalQuery = query;\n\t\tif (missingTableAlias || missingSelectColumnAlias) {\n\t\t\t// insert AS before word\n\t\t\tfinalQuery = this.formatWithSpaces(asToken, finalQuery);\n\t\t}\n\n\t\t// insert word\n\t\tfinalQuery = this.formatWithSpaces(token, finalQuery);\n\n\t\tif (isEdgeCaseCTE || isEdgeCaseCreateTable || missingCastTypeAs) {\n\t\t\t// insert AS after word\n\t\t\tfinalQuery = this.formatWithSpaces(asToken, finalQuery);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\t/**\n\t * Checks if a newline should currently be inserted\n\t * @param {number} index - index of current token\n\t * @return {boolean} Whether or not a newline should be inserted\n\t */\n\tcheckNewline(index: number): boolean {\n\t\tconst tail = this.tokens.slice(index + 1); // get all tokens after current token\n\t\tconst nextTokens = tail.slice(\n\t\t\t// get all tokens between current token and next Reserved Command or query end\n\t\t\t0,\n\t\t\ttail.length\n\t\t\t\t? tail.findIndex(\n\t\t\t\t\t\t({ type, value }) =>\n\t\t\t\t\t\t\ttype === TokenType.RESERVED_COMMAND ||\n\t\t\t\t\t\t\ttype === TokenType.RESERVED_BINARY_COMMAND ||\n\t\t\t\t\t\t\tvalue === ';'\n\t\t\t\t  )\n\t\t\t\t: undefined // add undefined for EOF\n\t\t);\n\n\t\tif (\n\t\t\tthis.newline === NewlineMode.always ||\n\t\t\t(this.withinSelect &&\n\t\t\t\tnextTokens.some(({ type, value }) => type === TokenType.BLOCK_START && value.length > 1)) // auto break if SELECT includes CASE statements\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.newline === NewlineMode.never) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numItems = nextTokens.reduce(\n\t\t\t(acc, { type, value }) => {\n\t\t\t\tif (value === ',' && !acc.inParen) {\n\t\t\t\t\treturn { ...acc, count: acc.count + 1 };\n\t\t\t\t} // count commas between items in clause\n\t\t\t\tif (type === TokenType.BLOCK_START) {\n\t\t\t\t\treturn { ...acc, inParen: true };\n\t\t\t\t} // don't count commas in functions\n\t\t\t\tif (type === TokenType.BLOCK_END) {\n\t\t\t\t\treturn { ...acc, inParen: false };\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t{ count: 1, inParen: false } // start with 1 for first word\n\t\t).count;\n\n\t\t// calculate length if it were all inline\n\t\tconst inlineWidth = `${this.tokens[index].whitespaceBefore}${\n\t\t\tthis.tokens[index].value\n\t\t} ${nextTokens.map(({ value }) => (value === ',' ? value + ' ' : value)).join('')}`.length;\n\n\t\tif (this.newline === NewlineMode.lineWidth) {\n\t\t\treturn inlineWidth > this.lineWidth;\n\t\t} else if (!Number.isNaN(this.newline)) {\n\t\t\treturn numItems > this.newline || inlineWidth > this.lineWidth;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/** Formats a line comment onto query */\n\tformatLineComment(token: Token, query: string): string {\n\t\treturn this.addNewline(query + this.show(token));\n\t}\n\n\t/** Formats a block comment onto query */\n\tformatBlockComment(token: Token, query: string): string {\n\t\treturn this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n\t}\n\n\t/** Aligns comment to current indentation level */\n\tindentComment(comment: string): string {\n\t\treturn comment.replace(/\\n[ \\t]*/gu, '\\n' + this.indentation.getIndent() + ' ');\n\t}\n\n\t/**\n\t * Formats a Reserved Command onto query, increasing indentation level where necessary\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatCommand(token: Token, query: string): string {\n\t\tthis.indentation.decreaseTopLevel();\n\n\t\tquery = this.addNewline(query);\n\n\t\t// indent TenSpace formats, except when preceding a (\n\t\tif (this.cfg.tenSpace) {\n\t\t\tif (this.tokenLookAhead()?.value !== '(') {\n\t\t\t\tthis.indentation.increaseTopLevel();\n\t\t\t}\n\t\t\t// indent standard format, except when is [FROM] (\n\t\t} else if (!(this.tokenLookAhead()?.value === '(' && isToken.FROM(token))) {\n\t\t\tthis.indentation.increaseTopLevel();\n\t\t}\n\n\t\tquery += this.equalizeWhitespace(this.show(token)); // print token onto query\n\t\tif (this.currentNewline && !this.cfg.tenSpace) {\n\t\t\tquery = this.addNewline(query);\n\t\t} else {\n\t\t\tquery += ' ';\n\t\t}\n\t\treturn query;\n\t}\n\n\t/**\n\t * Formats a Reserved Binary Command onto query, joining neighbouring tokens\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatBinaryCommand(token: Token, query: string): string {\n\t\tconst isJoin = /JOIN/i.test(token.value); // check if token contains JOIN\n\t\tif (!isJoin || this.cfg.tenSpace) {\n\t\t\t// decrease for boolean set operators or in tenSpace modes\n\t\t\tthis.indentation.decreaseTopLevel();\n\t\t}\n\t\tquery = this.addNewline(query) + this.equalizeWhitespace(this.show(token));\n\t\treturn isJoin ? query + ' ' : this.addNewline(query);\n\t}\n\n\t/**\n\t * Formats a Reserved Keyword onto query, skipping AS if disabled\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatKeyword(token: Token, query: string): string {\n\t\tif (\n\t\t\tisToken.AS(token) &&\n\t\t\t(this.cfg.aliasAs === AliasMode.never || // skip all AS if never\n\t\t\t\t(this.cfg.aliasAs === AliasMode.select &&\n\t\t\t\t\tthis.tokenLookBehind()?.value === ')' && // ) [AS] alias but not SELECT (a) [AS] alpha\n\t\t\t\t\t!this.withinSelect && // skip WITH foo [AS] ( ...\n\t\t\t\t\tthis.tokenLookAhead()?.value !== '('))\n\t\t) {\n\t\t\t// do not format if skipping AS\n\t\t\treturn query;\n\t\t}\n\n\t\treturn this.formatWithSpaces(token, query);\n\t}\n\n\t/**\n\t * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatDependentClause(token: Token, query: string): string {\n\t\treturn this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + ' ';\n\t}\n\n\t/**\n\t * Formats an Operator onto query, following rules for specific characters\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatOperator(token: Token, query: string): string {\n\t\t// special operator\n\t\tif (token.value === ',') {\n\t\t\treturn this.formatComma(token, query);\n\t\t} else if (token.value === ';') {\n\t\t\treturn this.formatQuerySeparator(token, query);\n\t\t} else if (['$', '['].includes(token.value)) {\n\t\t\treturn this.formatWithSpaces(token, query, 'before');\n\t\t} else if ([':', ']'].includes(token.value)) {\n\t\t\treturn this.formatWithSpaces(token, query, 'after');\n\t\t} else if (['.', '{', '}', '`'].includes(token.value)) {\n\t\t\treturn this.formatWithoutSpaces(token, query);\n\t\t}\n\n\t\t// regular operator\n\t\tif (this.cfg.denseOperators && this.tokenLookBehind()?.type !== TokenType.RESERVED_COMMAND) {\n\t\t\t// do not trim whitespace if SELECT *\n\t\t\treturn this.formatWithoutSpaces(token, query);\n\t\t}\n\t\treturn this.formatWithSpaces(token, query);\n\t}\n\n\t/**\n\t * Formats a Logical Operator onto query, joining boolean conditions\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatLogicalOperator(token: Token, query: string): string {\n\t\t// ignore AND when BETWEEN x [AND] y\n\t\tif (isToken.AND(token) && isToken.BETWEEN(this.tokenLookBehind(2))) {\n\t\t\treturn this.formatWithSpaces(token, query);\n\t\t}\n\n\t\tif (this.cfg.tenSpace) {\n\t\t\tthis.indentation.decreaseTopLevel();\n\t\t}\n\n\t\tif (this.cfg.breakBeforeBooleanOperator) {\n\t\t\treturn (\n\t\t\t\t(this.currentNewline ? this.addNewline(query) : query) +\n\t\t\t\tthis.equalizeWhitespace(this.show(token)) +\n\t\t\t\t' '\n\t\t\t);\n\t\t} else {\n\t\t\tquery += this.show(token);\n\t\t\treturn this.currentNewline ? this.addNewline(query) : query;\n\t\t}\n\t}\n\n\t/** Replace any sequence of whitespace characters with single space */\n\tequalizeWhitespace(string: string): string {\n\t\treturn string.replace(/\\s+/gu, ' ');\n\t}\n\n\t/**\n\t * Formats a Block Start token (left paren/bracket/brace, CASE) onto query, beginning an Inline Block or increasing indentation where necessary\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatBlockStart(token: Token, query: string): string {\n\t\tif (isToken.CASE(token)) {\n\t\t\tquery = this.formatWithSpaces(token, query);\n\t\t} else {\n\t\t\t// Take out the preceding space unless there was whitespace there in the original query\n\t\t\t// or another opening parens or line comment\n\t\t\tconst preserveWhitespaceFor = [\n\t\t\t\tTokenType.BLOCK_START,\n\t\t\t\tTokenType.LINE_COMMENT,\n\t\t\t\tTokenType.OPERATOR,\n\t\t\t];\n\t\t\tif (\n\t\t\t\ttoken.whitespaceBefore?.length === 0 &&\n\t\t\t\t!preserveWhitespaceFor.includes(this.tokenLookBehind()?.type)\n\t\t\t) {\n\t\t\t\tquery = trimSpacesEnd(query);\n\t\t\t} else if (!this.cfg.parenOptions.openParenNewline) {\n\t\t\t\tquery = query.trimEnd() + ' ';\n\t\t\t}\n\t\t\tquery += this.show(token);\n\t\t\tthis.inlineBlock.beginIfPossible(this.tokens, this.index);\n\t\t}\n\n\t\tif (!this.inlineBlock.isActive()) {\n\t\t\tthis.indentation.increaseBlockLevel();\n\t\t\tif (!isToken.CASE(token) || this.newline === NewlineMode.always) {\n\t\t\t\tquery = this.addNewline(query);\n\t\t\t}\n\t\t}\n\t\treturn query;\n\t}\n\n\t/**\n\t * Formats a Block End token (right paren/bracket/brace, END) onto query, closing an Inline Block or decreasing indentation where necessary\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatBlockEnd(token: Token, query: string): string {\n\t\tif (this.inlineBlock.isActive()) {\n\t\t\tthis.inlineBlock.end();\n\t\t\tif (isToken.END(token)) {\n\t\t\t\treturn this.formatWithSpaces(token, query); // add space before END when closing inline block\n\t\t\t}\n\t\t\treturn this.formatWithSpaces(token, query, 'after'); // do not add space before )\n\t\t} else {\n\t\t\tthis.indentation.decreaseBlockLevel();\n\n\t\t\tif (this.cfg.tenSpace) {\n\t\t\t\tquery = this.addNewline(query) + this.cfg.indent;\n\t\t\t} else if (this.cfg.parenOptions.closeParenNewline) {\n\t\t\t\tquery = this.addNewline(query);\n\t\t\t} else {\n\t\t\t\tquery = query.trimEnd() + ' ';\n\t\t\t}\n\n\t\t\treturn this.formatWithSpaces(token, query);\n\t\t}\n\t}\n\n\t/**\n\t * Formats a Placeholder item onto query, to be replaced with the value of the placeholder\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatPlaceholder(token: Token, query: string): string {\n\t\treturn query + this.params.get(token) + ' ';\n\t}\n\n\t/**\n\t * Formats a comma Operator onto query, ending line unless in an Inline Block\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatComma(token: Token, query: string): string {\n\t\tquery = trimSpacesEnd(query) + this.show(token) + ' ';\n\n\t\tif (this.inlineBlock.isActive()) {\n\t\t\treturn query;\n\t\t} else if (isToken.LIMIT(this.previousReservedToken)) {\n\t\t\treturn query;\n\t\t} else if (this.currentNewline) {\n\t\t\treturn this.addNewline(query);\n\t\t} else {\n\t\t\treturn query;\n\t\t}\n\t}\n\n\t/** Simple append of token onto query */\n\tformatWithoutSpaces(token: Token, query: string): string {\n\t\treturn trimSpacesEnd(query) + this.show(token);\n\t}\n\n\t/**\n\t * Add token onto query with spaces - either before, after, or both\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t * @param {'before' | 'after' | 'both'} addSpace - where to add spaces around token\n\t * @return {string} token string with specified spaces\n\t */\n\tformatWithSpaces(\n\t\ttoken: Token,\n\t\tquery: string,\n\t\taddSpace: 'before' | 'after' | 'both' = 'both'\n\t): string {\n\t\tconst before = addSpace === 'after' ? trimSpacesEnd(query) : query;\n\t\tconst after = addSpace === 'before' ? '' : ' ';\n\t\treturn before + this.show(token) + after;\n\t}\n\n\t/**\n\t * Format Delimiter token onto query, adding newlines accoring to `this.cfg.linesBetweenQueries`\n\t * @param {Token} token - current token\n\t * @param {string} query - formatted query so far\n\t */\n\tformatQuerySeparator(token: Token, query: string): string {\n\t\tthis.indentation.resetIndentation();\n\t\tquery = trimSpacesEnd(query);\n\n\t\t// move delimiter to new line if specified\n\t\tif (this.cfg.semicolonNewline) {\n\t\t\tquery += '\\n';\n\t\t\tif (this.cfg.tenSpace) {\n\t\t\t\tquery += this.cfg.indent;\n\t\t\t}\n\t\t}\n\t\treturn query + this.show(token) + '\\n'.repeat(this.cfg.linesBetweenQueries + 1);\n\t}\n\n\t/** Converts token to string, uppercasing if enabled */\n\tshow(token: Token): string {\n\t\tif (\n\t\t\tisReserved(token) ||\n\t\t\ttoken.type === TokenType.BLOCK_START ||\n\t\t\ttoken.type === TokenType.BLOCK_END\n\t\t) {\n\t\t\treturn this.cfg.uppercase ? token.value.toUpperCase() : token.value.toLowerCase();\n\t\t} else {\n\t\t\treturn token.value;\n\t\t}\n\t}\n\n\t/** Inserts a newline onto the query */\n\taddNewline(query: string): string {\n\t\tquery = trimSpacesEnd(query);\n\t\tif (!query.endsWith('\\n')) {\n\t\t\tquery += '\\n';\n\t\t}\n\t\treturn query + this.indentation.getIndent();\n\t}\n\n\t/** Produces a 10-char wide version of reserved token for TenSpace modes */\n\ttenSpacedToken(token: Token): Token {\n\t\tconst addBuffer = (string: string, bufferLength = 9) =>\n\t\t\tZWS.repeat(Math.max(bufferLength - string.length, 0));\n\t\tif (this.cfg.tenSpace) {\n\t\t\tlet bufferItem = token.value; // store which part of keyword receives 10-space buffer\n\t\t\tlet tail = [] as string[]; // rest of keyword\n\t\t\tif (bufferItem.length >= 10 && bufferItem.includes(' ')) {\n\t\t\t\t// split for long keywords like INNER JOIN or UNION DISTINCT\n\t\t\t\t[bufferItem, ...tail] = bufferItem.split(' ');\n\t\t\t}\n\n\t\t\tif (this.cfg.keywordPosition === KeywordMode.tenSpaceLeft) {\n\t\t\t\tbufferItem += addBuffer(bufferItem);\n\t\t\t} else {\n\t\t\t\tbufferItem = addBuffer(bufferItem) + bufferItem;\n\t\t\t}\n\n\t\t\ttoken.value = bufferItem + ['', ...tail].join(' ');\n\t\t}\n\t\treturn token;\n\t}\n\n\t/** Fetches nth previous token from the token stream */\n\ttokenLookBehind(n = 1) {\n\t\treturn this.tokens[this.index - n];\n\t}\n\n\t/** Fetches nth next token from the token stream */\n\ttokenLookAhead(n = 1) {\n\t\treturn this.tokens[this.index + n];\n\t}\n}\n"],"file":"Formatter.js"}