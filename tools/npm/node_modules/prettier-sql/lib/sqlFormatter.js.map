{"version":3,"sources":["../src/sqlFormatter.ts"],"names":["formatters","bigquery","BigQueryFormatter","db2","Db2Formatter","hive","HiveFormatter","mariadb","MariaDbFormatter","mysql","MySqlFormatter","n1ql","N1qlFormatter","plsql","PlSqlFormatter","postgresql","PostgreSqlFormatter","redshift","RedshiftFormatter","spark","SparkSqlFormatter","sql","StandardSqlFormatter","tsql","TSqlFormatter","supportedDialects","Object","keys","format","query","cfg","Error","language","includes","keywordPosition","KeywordMode","tenSpaceLeft","tenSpaceRight","indent","repeat","newline","Number","isNaN","NewlineMode","always","lineWidth","console","warn","undefined","defaultOptions","uppercase","standard","breakBeforeBooleanOperator","aliasAs","AliasMode","select","tabulateAlias","commaPosition","CommaPosition","after","parenOptions","openParenNewline","closeParenNewline","linesBetweenQueries","denseOperators","semicolonNewline","Formatter"],"mappings":"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","sourcesContent":["import type { ParamItems } from './core/Params';\nimport BigQueryFormatter from './languages/bigquery.formatter';\nimport Db2Formatter from './languages/db2.formatter';\nimport HiveFormatter from './languages/hive.formatter';\nimport MariaDbFormatter from './languages/mariadb.formatter';\nimport MySqlFormatter from './languages/mysql.formatter';\nimport N1qlFormatter from './languages/n1ql.formatter';\nimport PlSqlFormatter from './languages/plsql.formatter';\nimport PostgreSqlFormatter from './languages/postgresql.formatter';\nimport RedshiftFormatter from './languages/redshift.formatter';\nimport SparkSqlFormatter from './languages/sparksql.formatter';\nimport StandardSqlFormatter from './languages/standardsql.formatter';\nimport TSqlFormatter from './languages/tsql.formatter';\n\nimport { AliasMode, CommaPosition, KeywordMode, NewlineMode, ParenOptions } from './types';\n\nexport const formatters = {\n\tbigquery: BigQueryFormatter,\n\tdb2: Db2Formatter,\n\thive: HiveFormatter,\n\tmariadb: MariaDbFormatter,\n\tmysql: MySqlFormatter,\n\tn1ql: N1qlFormatter,\n\tplsql: PlSqlFormatter,\n\tpostgresql: PostgreSqlFormatter,\n\tredshift: RedshiftFormatter,\n\tspark: SparkSqlFormatter,\n\tsql: StandardSqlFormatter,\n\ttsql: TSqlFormatter,\n};\nexport type FormatterLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nexport interface FormatOptions {\n\tlanguage: FormatterLanguage;\n\tindent: string;\n\tuppercase: boolean;\n\tkeywordPosition: KeywordMode | keyof typeof KeywordMode;\n\tnewline: NewlineMode | keyof typeof NewlineMode | number;\n\tbreakBeforeBooleanOperator: boolean;\n\taliasAs: AliasMode | keyof typeof AliasMode;\n\ttabulateAlias: boolean;\n\tcommaPosition: CommaPosition | keyof typeof CommaPosition;\n\tparenOptions: ParenOptions;\n\tlineWidth: number;\n\tlinesBetweenQueries: number;\n\tdenseOperators: boolean;\n\tsemicolonNewline: boolean;\n\tparams?: ParamItems | string[];\n}\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg\n *  @param {string} cfg.language - Query language, default is Standard SQL\n *  @param {string} cfg.indent - Characters used for indentation, default is \"  \" (2 spaces)\n *  @param {Boolean} cfg.uppercase - Converts keywords to uppercase\n *  @param {KeywordMode} cfg.keywordPosition - Sets main keyword position style, see keywordPosition.md for examples\n *  @param {NewlineMode} cfg.newline - Determines when to break words onto a newline; always | never | lineWidth (break only when > line width) | number (break when > n)\n *  @param {Boolean} cfg.breakBeforeBooleanOperator - Break before boolean operator (AND, OR, XOR) ?\n *  @param {AliasMode} cfg.aliasAs - Whether to use AS in column aliases in only SELECT clause, both SELECT and table aliases, or never\n *  @param {Boolean} cfg.tabulateAlias - Whether to have alias following clause or aligned to right\n *  @param {CommaPosition} cfg.commaPosition - Where to place the comma in listed clauses\n *  @param {ParenOptions} cfg.parenOptions - Various options for parentheses\n *  \t@param {Boolean} cfg.parenOptions -.openParenNewline Whether to place opening parenthesis on same line or newline\n *  \t@param {Boolean} cfg.parenOptions -.closeParenNewline Whether to place closing parenthesis on same line or newline\n *  //\t@param {Boolean} cfg.parenOptions -.reservedFunctionParens Whether to use parenthesis for reserved functions such as COUNT\n *  //\t@param {Boolean} cfg.parenOptions -.functionParenSpace Whether to add space before reserved function parens\n *  @param {Integer} cfg.lineWidth - Number of characters in each line before breaking, default: 50\n *  @param {Integer} cfg.linesBetweenQueries - How many line breaks between queries\n *  @param {Boolean} cfg.denseOperators - whether to format operators with spaces\n *  @param {ParamItems} cfg.params - Collection of params for placeholder replacement\n *  @param {Boolean} cfg.semicolonNewline - Whether to place semicolon on newline\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatOptions> = {}): string => {\n\tif (typeof query !== 'string') {\n\t\tthrow new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n\t}\n\n\tif (cfg.language && !supportedDialects.includes(cfg.language)) {\n\t\tthrow Error(`Unsupported SQL dialect: ${cfg.language}`);\n\t}\n\n\tif (\n\t\tcfg.keywordPosition === KeywordMode.tenSpaceLeft ||\n\t\tcfg.keywordPosition === KeywordMode.tenSpaceRight\n\t) {\n\t\tcfg.indent = ' '.repeat(10);\n\t}\n\n\tif (cfg.newline && !Number.isNaN(+cfg.newline)) {\n\t\tif ((cfg.newline ?? 0) < 0) {\n\t\t\tthrow new Error('Error: newline must be a positive number.');\n\t\t}\n\t\tif (cfg.newline === 0) {\n\t\t\tcfg.newline = NewlineMode.always;\n\t\t}\n\t}\n\n\tif (cfg.lineWidth && cfg.lineWidth <= 0) {\n\t\tconsole.warn('Warning: cfg.linewidth was <=0, reset to default value');\n\t\tcfg.lineWidth = undefined;\n\t}\n\n\tconst defaultOptions: FormatOptions = {\n\t\tlanguage: 'sql',\n\t\tindent: '  ',\n\t\tuppercase: true,\n\t\tkeywordPosition: KeywordMode.standard,\n\t\tnewline: NewlineMode.always,\n\t\tbreakBeforeBooleanOperator: true,\n\t\taliasAs: AliasMode.select,\n\t\ttabulateAlias: false,\n\t\tcommaPosition: CommaPosition.after,\n\t\tparenOptions: {\n\t\t\topenParenNewline: true,\n\t\t\tcloseParenNewline: true,\n\t\t\t// reservedFunctionParens: true,\n\t\t\t// functionParenSpace: false,\n\t\t},\n\t\tlineWidth: 50,\n\t\tlinesBetweenQueries: 1,\n\t\tdenseOperators: false,\n\t\tsemicolonNewline: false,\n\t};\n\tcfg = {\n\t\t...defaultOptions,\n\t\t...cfg,\n\t\tparenOptions: { ...defaultOptions.parenOptions, ...cfg.parenOptions },\n\t};\n\n\tconst Formatter = formatters[cfg.language!];\n\treturn new Formatter(cfg as FormatOptions).format(query);\n};\n"],"file":"sqlFormatter.js"}