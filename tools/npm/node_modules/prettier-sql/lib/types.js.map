{"version":3,"sources":["../src/types.ts"],"names":["KeywordMode","NewlineMode","AliasMode","CommaPosition"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;IACYA,W;AAMZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAZYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,2BAAAA,W;;IAaAC,W;AAMZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAZYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,2BAAAA,W;;IAaAC,S;AAMZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAZYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,yBAAAA,S;;IAaAC,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a","sourcesContent":["/**\n * Enum for the different keyword formats\n * @enum {string}\n * @property {string} standard - Standard keyword format\n * @property {string} tenSpaceLeft - Central aligned keyword format, keywords left-aligned\n * @property {string} tenSpaceRight - Central aligned keyword format, keywords right-aligned\n */\nexport enum KeywordMode {\n\tstandard = 'standard',\n\ttenSpaceLeft = 'tenSpaceLeft',\n\ttenSpaceRight = 'tenSpaceRight',\n}\n\n/**\n * Enum for the different newline modes\n * @enum {string}\n * @property {string} always - Always use newlines\n * @property {string} never - Never use newlines\n * @property {string} lineWidth - Use newlines when line width is greater than the specified number\n */\nexport enum NewlineMode {\n\talways = 'always',\n\tnever = 'never',\n\tlineWidth = 'lineWidth',\n}\n\n/**\n * Enum for when to place AS for column aliases\n * @enum {string}\n * @property {string} always - Always use AS\n * @property {string} never - Never use AS\n * @property {string} select - Only use AS for SELECT clauses\n */\nexport enum AliasMode {\n\talways = 'always',\n\tnever = 'never',\n\tselect = 'select',\n}\n\n/**\n * Enum for when to place commas in listed clauses\n * @enum {string}\n * @property {string} after - Place after each item\n * @property {string} before - Place before each item\n * @property {string} tabular - Place commas at end of line, right-justified\n */\nexport enum CommaPosition {\n\tbefore = 'before',\n\tafter = 'after',\n\ttabular = 'tabular',\n}\n\nexport interface ParenOptions {\n\topenParenNewline?: boolean;\n\tcloseParenNewline?: boolean;\n\t// reservedFunctionParens: boolean;\n\t// functionParenSpace: boolean;\n}\n"],"file":"types.js"}