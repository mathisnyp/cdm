version: "3.9"

services:
  zookeeper:
    build: external/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
  kafka:
    build: ./external/kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_BROKERCONNECT: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  web-ui:
    hostname: web-ui
    build: ./frontend
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend-for-frontend
  backend-for-frontend:
    build: ./backend-for-frontend
    hostname: bff
    ports:
      - "8090:8080"
    environment:
      kafka-bootstrap-servers: kafka:29092
      auth-service-endpoint: http://host.docker.internal:8080
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
    depends_on:
      - auth-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
#  auth-service:
#    build: ./services/auth/service
#    ports:
#      - "8075:80"
#    depends_on:
#      - auth-service-db
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
  auth-service-db:
    build: ./external/databases/postgresql
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: AuthenticationService
    ports:
      - "5432:5432"
  gen-ai-service:
    build: ./services/gen-ai-service/service
    ports:
      - "8072:80"
    depends_on:
      - kafka
    extra_hosts:
      - "host.docker.internal:host-gateway"
  geoservice:
    build: ./services/geo-service/
    hostname: geoservice
    depends_on:
      - geoservice-neo4j
      - kafka
    environment:
      kafka-bootstrap-servers: kafka:29092
      neo4j-uri: neo4j://geoservice-neo4j:7687
      neo4j-username: neo4j
      neo4j-password: password
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
    ports:
      - "8071:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  geoservice-neo4j:
    build: ./external/databases/neo4j
    hostname: geoservice-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - ./external/databases/neo4j/db/data:/data
      - ./external/databases/neo4j/db/conf:/conf
      - ./external/databases/neo4j/db/logs:/logs
      - ./external/databases/neo4j/db/plugins:/plugins
  auth-service:
    build: ./services/auth/service
    ports:
      - "8080:80"
    depends_on:
      - local-db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  local-db:
    build: ./external/databases/postgresql
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: AuthenticationService
    ports:
      - "5432:5432"
#  backend-for-frontend:
#    build: ./backend-for-frontend
#    hostname: bff
#    ports:
#      - "6060:8080"
#    environment:
#      kafka-bootstrap-servers: kafka:29092
#      auth-service-endpoint: http://host.docker.internal:8080
#      otlp-metrics-url: http://otel-collector:4318/v1/metrics
#      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
#      otlp-collector-endpoint: http://otel-collector:4317
#    depends_on:
#      - auth-service
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#  #Local Observability:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.90.1
    hostname: otel-collector
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./configs/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    depends_on:
      - mimir
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  mimir:
    container_name: mimir
    hostname: mimir
    build: ./external/observability/mimir
    volumes:
      - ./configs/mimir/demo.yml:/etc/mimir/demo.yml
    command: ["--config.file=/etc/mimir/demo.yml"]
    ports:
      - "9009:9009"
  loki:
    image: grafana/loki:latest
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/loki/local-config.yaml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
  tempo:
    image: grafana/tempo:latest
    hostname: tempo
    command: ["-config.file=/etc/tempo.yml"]
    volumes:
      - ./configs/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200" # tempo
      - "4317" # otlp grpc

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
    volumes:
      - ./configs/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "4000:3000"

volumes:
  auth_postgres_data: {}
  grafana-storage: {}

networks:
  cdm_network:
    driver: bridge
