version: "3.9"

services:
  web-ui:
    hostname: web-ui
    image: mathisntcd/cdm-webui
    build: ./frontend
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend-for-frontend
  backend-for-frontend:
    build: ./backend-for-frontend
    image: mathisntcd/cdm-bff
    hostname: bff
    ports:
      - "8090:8080"
    environment:
      kafka-bootstrap-servers: kafka:29092
#      auth-service-endpoint: http://host.docker.internal:8080
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
      incident-service-endpoint: incident-service:8080
      auth-service-endpoint: auth-service:80
      communication-service-endpoint: communication-service:8080
      geo-service-endpoint: geo-service:8080
      gen-ai-service-endpoint: gen-ai-service:80
    depends_on:
      - auth-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
  auth-service:
    build: ./services/auth/service
    image: mathisntcd/cdm-authservice
    hostname: auth-service
    ports:
      - "8091:80"
    depends_on:
      - local-db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  communication-service:
    build: ./services/communication-service
    image: mathisntcd/cdm-communicationservice
    hostname: communication-service
    ports:
      - "8092:8080"
    environment:
      database-url: jdbc:postgresql://local-db:5432/postgres
      database-username: postgres
      database-password: password
      kafka-bootstrap-servers: kafka:29092
      auth-service-endpoint: http://host.docker.internal:8080
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
    depends_on:
      - local-db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  dublin-open-data-service:
    build: ./services/dublin-open-data-service
    image: mathisntcd/cdm-dublin-open-data-service
    hostname: dublin-open-data-service
    ports:
      - "8093:8080"
    environment:
      database-url: jdbc:postgresql://local-db:5432/postgres
      database-username: postgres
      database-password: password
      kafka-bootstrap-servers: kafka:29092
      auth-service-endpoint: http://host.docker.internal:8080
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
    depends_on:
      - local-db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  gen-ai-service:
    build: ./services/gen-ai-service/service
    image: mathisntcd/cdm-genai-service
    hostname: gen-ai-service
    ports:
      - "8094:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  geoservice:
    build: ./services/geo-service/
    image: mathisntcd/cdm-geoservice
    hostname: geo-service
    depends_on:
      - geoservice-neo4j
      - local-db
    environment:
      database-url: jdbc:postgresql://local-db:5432/postgres
      database-username: postgres
      database-password: password
      kafka-bootstrap-servers: kafka:29092
      neo4j-uri: neo4j://geoservice-neo4j:7687
      neo4j-username: neo4j
      neo4j-password: password

    ports:
      - "8095:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  incident-service:
    build: ./services/incident-service/
    image: mathisntcd/cdm-incident-service
    hostname: incident-service
    ports:
      - "8096:8080"
    environment:
      database-url: jdbc:postgresql://local-db:5432/postgres
      database-username: postgres
      database-password: password
      kafka-bootstrap-servers: kafka:29092
      auth-service-endpoint: http://host.docker.internal:8080
      otlp-metrics-url: http://otel-collector:4318/v1/metrics
      otlp-tracing-endpoint: http://otel-collector:4318/v1/traces
      otlp-collector-endpoint: http://otel-collector:4317
    depends_on:
      - local-db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  geoservice-neo4j:
    build: ./external/databases/neo4j
    image: mathisntcd/cdm-neo4j
    hostname: geoservice-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - ./external/databases/neo4j/db/data:/data
      - ./external/databases/neo4j/db/conf:/conf
      - ./external/databases/neo4j/db/logs:/logs
      - ./external/databases/neo4j/db/plugins:/plugins
  local-db:
    build: ./external/databases/postgresql
    hostname: local-db
    image: mathisntcd/cdm-pgsql
    volumes:
      - local_postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
  #Local Observability:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.90.1
    hostname: otel-collector
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./configs/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    depends_on:
      - mimir
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  mimir:
    container_name: mimir
    hostname: mimir
    build: ./external/observability/mimir
    volumes:
      - ./configs/mimir/demo.yml:/etc/mimir/demo.yml
    command: ["--config.file=/etc/mimir/demo.yml"]
    ports:
      - "9009:9009"
  loki:
    image: grafana/loki:latest
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/loki/local-config.yaml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
  tempo:
    image: grafana/tempo:latest
    hostname: tempo
    command: ["-config.file=/etc/tempo.yml"]
    volumes:
      - ./configs/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200" # tempo
      - "4317" # otlp grpc
  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
    volumes:
      - ./configs/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "4000:3000"
  


volumes:
  local_postgres_data: {}
  grafana-storage: {}

networks:
  cdm_network:
    driver: bridge
